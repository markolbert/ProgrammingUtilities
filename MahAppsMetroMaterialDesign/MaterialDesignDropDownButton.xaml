<!--
Copyright (c) 2021, 2022 Mark A. Olbert

This file is part of MahAppsMaterialDesign.

MahAppsMaterialDesign is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation, either version 3 of the License, or 
(at your option) any later version.

MahAppsMaterialDesign is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along 
with MahAppsMaterialDesign. If not, see <https://www.gnu.org/licenses/>.
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary
            Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Shadows.xaml" />
        <ResourceDictionary>
            <!--<converters:BorderClipConverter x:Key="BorderClipConverter" />-->
            <materialDesign:BrushOpacityConverter x:Key="BrushOpacityConverter" />
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeThickness="1" StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <materialDesign:RangeLengthConverter x:Key="RangeLengthConverter" />
    <materialDesign:MathConverter x:Key="MathAddConverter" Operation="Add" />
    <system:Int32 x:Key="ProgressRingStrokeWidth">8</system:Int32>

    <SolidColorBrush x:Key="AttentionToActionBrush" Color="{StaticResource MaterialDesignShadow}" Opacity=".23"
                     po:Freeze="True" />

    <Style x:Key="MaterialDesignRaisedDropDownButton" TargetType="{x:Type controls:DropDownButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground"
                Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorBackground"
                Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="materialDesign:RippleAssist.Feedback" Value="White" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth1" />
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="16 4 16 4" />
        <Setter Property="Height" Value="32" />
        <Setter Property="materialDesign:ButtonProgressAssist.IsIndicatorVisible" Value="False" />
        <Setter Property="materialDesign:ButtonProgressAssist.Opacity" Value=".4" />
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="2" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator
                            CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(materialDesign:ShadowAssist.CacheMode)}">
                            <Grid>
                                <Border Background="{TemplateBinding Background}"
                                        CornerRadius="{Binding Path=(materialDesign:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        x:Name="border"
                                        Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ShadowAssist.ShadowDepth), Converter={x:Static materialDesign:ShadowConverter.Instance}}" />
                                <ProgressBar x:Name="ProgressBar"
                                             Style="{DynamicResource MaterialDesignLinearProgressBar}"
                                             Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Minimum)}"
                                             Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Maximum)}"
                                             Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IndicatorForeground)}"
                                             Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IndicatorBackground)}"
                                             Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Value)}"
                                             IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IsIndeterminate)}"
                                             Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}"
                                             Height="{TemplateBinding Height}"
                                             Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}, Path=ActualWidth}"
                                             Opacity="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Opacity)}"
                                             HorizontalAlignment="Left"
                                             VerticalAlignment="Center">
                                </ProgressBar>
                            </Grid>
                        </AdornerDecorator>
                        <materialDesign:Ripple Content="{TemplateBinding Content}"
                                               ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"
                                               ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                               VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                               Padding="{TemplateBinding Padding}"
                                               SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <materialDesign:Ripple.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </materialDesign:Ripple.Clip>
                        </materialDesign:Ripple>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="materialDesign:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="materialDesign:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignRaisedLightDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignRaisedButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightForegroundBrush}" />
    </Style>

    <Style x:Key="MaterialDesignRaisedDarkDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignRaisedButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
    </Style>

    <Style x:Key="MaterialDesignRaisedAccentDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignRaisedButton}">
        <Setter Property="Background" Value="{DynamicResource SecondaryHueMidBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SecondaryHueMidBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource SecondaryHueMidForegroundBrush}" />
    </Style>

    <Style x:Key="MaterialDesignFlatDropDownButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="materialDesign:RippleAssist.Feedback" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="TextBlock.FontWeight" Value="Medium" />
        <Setter Property="TextBlock.FontSize" Value="14" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="16 4 16 4" />
        <Setter Property="Height" Value="32" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" x:Name="border"
                                CornerRadius="{Binding Path=(materialDesign:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <materialDesign:Ripple Content="{TemplateBinding Content}"
                                                   ContentTemplate="{TemplateBinding ContentTemplate}"
                                                   Focusable="False"
                                                   ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   Padding="{TemplateBinding Padding}"
                                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <materialDesign:Ripple.Clip>
                                    <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                        <Binding ElementName="border" Path="ActualWidth" />
                                        <Binding ElementName="border" Path="ActualHeight" />
                                        <Binding ElementName="border" Path="CornerRadius" />
                                        <Binding ElementName="border" Path="BorderThickness" />
                                    </MultiBinding>
                                </materialDesign:Ripple.Clip>
                            </materialDesign:Ripple>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border"
                                    Value="{Binding Foreground,
                                                                                        RelativeSource={RelativeSource Mode=TemplatedParent},
                                                                                        Converter={StaticResource BrushOpacityConverter},
                                                                                        ConverterParameter=0.16}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignFlatAccentDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryHueMidBrush}" />
        <Setter Property="materialDesign:RippleAssist.Feedback" Value="{DynamicResource SecondaryHueMidBrush}" />
    </Style>

    <Style x:Key="MaterialDesignFlatAccentBgDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignRaisedAccentButton}">
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth0" />
    </Style>

    <Style x:Key="MaterialDesignFlatLightBgDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignRaisedLightButton}">
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth0" />
    </Style>

    <Style x:Key="MaterialDesignFlatMidBgDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignRaisedButton}">
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth0" />
    </Style>

    <Style x:Key="MaterialDesignFlatDarkBgDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignRaisedDarkButton}">
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth0" />
    </Style>

    <Style x:Key="MaterialDesignOutlinedDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="materialDesign:ButtonAssist.CornerRadius" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}"
                                x:Name="border"
                                CornerRadius="{Binding Path=(materialDesign:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <materialDesign:Ripple Content="{TemplateBinding Content}"
                                                   ContentTemplate="{TemplateBinding ContentTemplate}"
                                                   Focusable="False"
                                                   ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   Padding="{TemplateBinding Padding}"
                                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <materialDesign:Ripple.Clip>
                                    <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                        <Binding ElementName="border" Path="ActualWidth" />
                                        <Binding ElementName="border" Path="ActualHeight" />
                                        <Binding ElementName="border" Path="CornerRadius" />
                                        <Binding ElementName="border" Path="BorderThickness" />
                                    </MultiBinding>
                                </materialDesign:Ripple.Clip>
                            </materialDesign:Ripple>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border"
                                    Value="{Binding Foreground,
                                                                                        RelativeSource={RelativeSource Mode=TemplatedParent},
                                                                                        Converter={StaticResource BrushOpacityConverter},
                                                                                        ConverterParameter=0.16}" />

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignToolDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignToolForeground}" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="materialDesign:RippleAssist.IsCentered" Value="True" />
        <Setter Property="materialDesign:RippleAssist.ClipToBounds" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <materialDesign:Ripple Content="{TemplateBinding Content}"
                                           ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"
                                           ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                           HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                           Padding="{TemplateBinding Padding}"
                                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignToolForegroundDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignToolButton}">
        <Setter Property="Foreground"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    </Style>

    <Style x:Key="MaterialDesignFloatingActionMiniDropDownButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
        <Setter Property="materialDesign:RippleAssist.Feedback" Value="White" />
        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground"
                Value="{DynamicResource SecondaryHueMidBrush}" />
        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorBackground"
                Value="{DynamicResource MaterialDesignDivider}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth2" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="materialDesign:ButtonProgressAssist.Opacity" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <AdornerDecorator
                            CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(materialDesign:ShadowAssist.CacheMode)}">
                            <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}"
                                     StrokeThickness="{TemplateBinding BorderThickness}"
                                     Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ShadowAssist.ShadowDepth), Converter={x:Static materialDesign:ShadowConverter.Instance}}"
                                     x:Name="border">
                            </Ellipse>
                        </AdornerDecorator>
                        <ProgressBar x:Name="ProgressBar"
                                     Style="{DynamicResource MaterialDesignCircularProgressBar}"
                                     Minimum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Minimum)}"
                                     Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Maximum)}"
                                     Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IndicatorForeground)}"
                                     Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IndicatorBackground)}"
                                     Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.Value)}"
                                     IsIndeterminate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IsIndeterminate)}"
                                     Opacity="{Binding RelativeSource={RelativeSource TemplatedParent},  Path=(materialDesign:ButtonProgressAssist.Opacity)}"
                                     Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}}"
                                     Margin="-8"
                                     Width="{TemplateBinding Width, Converter={StaticResource MathAddConverter}, ConverterParameter={StaticResource ProgressRingStrokeWidth}}"
                                     Height="{TemplateBinding Height, Converter={StaticResource MathAddConverter}, ConverterParameter={StaticResource ProgressRingStrokeWidth}}"
                                     HorizontalAlignment="Stretch"
                                     VerticalAlignment="Stretch"
                                     RenderTransformOrigin=".5, .5">
                            <ProgressBar.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0" ScaleY="0" />
                                </TransformGroup>
                            </ProgressBar.RenderTransform>
                        </ProgressBar>
                        <Ellipse Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}"
                                 StrokeThickness="{TemplateBinding BorderThickness}" />
                        <materialDesign:Ripple Content="{TemplateBinding Content}"
                                               ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"
                                               ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                               Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}"
                                               ClipToBounds="True"
                                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                               VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                               Padding="{TemplateBinding Padding}"
                                               SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Ellipse x:Name="GeometryEllipse" Fill="Transparent" IsHitTestVisible="False" Focusable="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="Stroke" TargetName="border"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="materialDesign:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="materialDesign:ShadowAssist.Darken" Value="True" />
                        </Trigger>
                        <Trigger Property="materialDesign:ButtonProgressAssist.IsIndicatorVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" From=".9" To="1"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                         Storyboard.TargetName="ProgressBar" />
                                        <DoubleAnimation Duration="0:0:0.2" From=".9" To="1"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                         Storyboard.TargetName="ProgressBar" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" From="1" To=".9"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                         Storyboard.TargetName="ProgressBar" />
                                        <DoubleAnimation Duration="0:0:0.2" From="1" To=".9"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                         Storyboard.TargetName="ProgressBar" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignFloatingActionDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
        <Setter Property="Width" Value="56" />
        <Setter Property="Height" Value="56" />
    </Style>

    <Style x:Key="MaterialDesignFloatingActionMiniLightDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightForegroundBrush}" />
        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground"
                Value="{DynamicResource PrimaryHueDarkBrush}" />
    </Style>

    <Style x:Key="MaterialDesignFloatingActionMiniDarkDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground"
                Value="{DynamicResource PrimaryHueLightBrush}" />
    </Style>

    <Style x:Key="MaterialDesignFloatingActionMiniAccentDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
        <Setter Property="Background" Value="{DynamicResource SecondaryHueMidBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SecondaryHueMidBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource SecondaryHueMidForegroundBrush}" />
        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground"
                Value="{DynamicResource PrimaryHueMidBrush}" />
    </Style>

    <Style x:Key="MaterialDesignFloatingActionLightDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignFloatingActionButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightForegroundBrush}" />
        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground"
                Value="{DynamicResource PrimaryHueDarkBrush}" />
    </Style>

    <Style x:Key="MaterialDesignFloatingActionDarkDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignFloatingActionButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground"
                Value="{DynamicResource PrimaryHueLightBrush}" />
    </Style>

    <Style x:Key="MaterialDesignFloatingActionAccentDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignFloatingActionButton}">
        <Setter Property="Background" Value="{DynamicResource SecondaryHueMidBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SecondaryHueMidBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource SecondaryHueMidForegroundBrush}" />
        <Setter Property="materialDesign:ButtonProgressAssist.IndicatorForeground"
                Value="{DynamicResource PrimaryHueMidBrush}" />
    </Style>

    <Style x:Key="MaterialDesignIconDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Width" Value="48" />
        <Setter Property="Height" Value="48" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <ControlTemplate.Resources>
                        <Style TargetType="materialDesign:PackIcon">
                            <Setter Property="Width" Value="24" />
                            <Setter Property="Height" Value="24" />
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Ellipse
                            Fill="{TemplateBinding Background}"
                            x:Name="border"
                            RenderTransformOrigin="0.5, 0.5">
                            <Ellipse.RenderTransform>
                                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.0" ScaleY="1.0"
                                                x:Name="CheckedEllipseScale" />
                            </Ellipse.RenderTransform>
                        </Ellipse>
                        <materialDesign:Ripple Content="{TemplateBinding Content}"
                                               ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"
                                               ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                               VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                               Padding="{TemplateBinding Padding}"
                                               Clip="{Binding ElementName=GeometryEllipse, Path=RenderedGeometry}"
                                               ClipToBounds="True"
                                               SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Ellipse x:Name="GeometryEllipse" Fill="Transparent" IsHitTestVisible="False" Focusable="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="border"
                                    Value="{DynamicResource MaterialDesignFlatButtonClick}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignIconForegroundDropDownButton" TargetType="{x:Type ButtonBase}"
           BasedOn="{StaticResource MaterialDesignIconButton}">
        <Setter Property="Foreground"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
    </Style>

</ResourceDictionary>